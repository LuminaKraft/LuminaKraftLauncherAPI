name: Deploy LuminaKraft Launcher API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: |
        uv pip install --system -r pyproject.toml
        
    - name: Run tests
      run: |
        # Run any Python tests if they exist
        if [ -f "tests/" ]; then
          uv run pytest tests/
        else
          echo "No tests directory found, skipping tests"
        fi
      env:
        CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
      
    - name: Test Docker build
      run: docker build -t luminakraft-launcher-api:test .

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment package
      run: |
        # Create a clean directory for deployment
        mkdir -p deploy-package
        
        # Copy specific files and directories we need
        cp pyproject.toml deploy-package/
        cp Dockerfile docker-compose.yml deploy-package/
        cp Dockerfile.debian deploy-package/ || true
        cp -r app/ deploy-package/
        cp -r data/ deploy-package/
        cp -r scripts/ deploy-package/ || true
        cp README.md deploy-package/ || true
        cp .dockerignore deploy-package/ || true
        
        # Create tar from the clean directory
        cd deploy-package
        tar -czf ../luminakraft-api.tar.gz .
        cd ..
        
        # Verify the archive was created
        ls -la luminakraft-api.tar.gz
        
    - name: Transfer files and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        port: ${{ secrets.DEPLOY_PORT }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Create app directory
          APP_DIR="$HOME/luminakraft-launcher-api"
          rm -rf $APP_DIR
          mkdir -p $APP_DIR
          
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        port: ${{ secrets.DEPLOY_PORT }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        source: "luminakraft-api.tar.gz"
        target: "$HOME/"
        
    - name: Extract and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        port: ${{ secrets.DEPLOY_PORT }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        timeout: 30m
        command_timeout: 20m
        script: |
          # Navigate to app directory
          APP_DIR="$HOME/luminakraft-launcher-api"
          cd $HOME
          
          # Extract files
          tar -xzf luminakraft-api.tar.gz -C $APP_DIR
          cd $APP_DIR
          
          # Verify files were extracted
          ls -la

          # Debug: print .env file contents
          echo "---- .env contents ----"
          cat .env || echo ".env not found"
          echo "-----------------------"
          
          # Stop existing containers and clean up
          echo "üõë Stopping existing containers..."
          docker-compose down || true
          
          # Clean up old images to free space
          echo "üßπ Cleaning up old Docker images..."
          docker image prune -f || true
          
          # Set up environment variable for docker-compose
          API_KEY_ESCAPED=$(echo '${{ secrets.CURSEFORGE_API_KEY }}' | sed 's/\$/\$\$/g')
          ALLOWED_ORIGINS_ESCAPED=$(echo '${{ secrets.ALLOWED_ORIGINS }}' | sed 's/\$/\$\$/g')
          echo "CURSEFORGE_API_KEY=$API_KEY_ESCAPED" > .env
          echo "ALLOWED_ORIGINS=$ALLOWED_ORIGINS_ESCAPED" >> .env
          
          # Show Docker system information for debugging
          echo "üíæ Docker system info:"
          docker system df || true
          
          # Build and start with docker-compose
          # Add error handling and timeout for build process
          echo "üî® Building Docker image..."
          timeout 15m docker-compose build --no-cache || {
            echo "‚ùå Docker build failed or timed out with Alpine"
            echo "üîÑ Retrying with Debian-based image..."
            
            # Try with Debian-based Dockerfile as fallback
            if [ -f Dockerfile.debian ]; then
              mv Dockerfile Dockerfile.alpine.backup
              mv Dockerfile.debian Dockerfile
              timeout 15m docker-compose build --no-cache || {
                echo "‚ùå Debian build also failed"
                mv Dockerfile.alpine.backup Dockerfile
                docker system df
                docker system prune -f
                exit 1
              }
              echo "‚úÖ Debian-based build successful"
            else
              echo "‚ùå No fallback Dockerfile available"
              docker system df
              docker system prune -f
              exit 1
            fi
          }
          
          echo "üöÄ Starting containers..."
          docker-compose up -d
          
          # Wait for container to be ready and check health
          echo "Waiting for container to be ready..."
          for i in {1..12}; do
            STATUS=$(docker-compose ps | grep luminakraft-launcher-api | grep -o "healthy\|starting\|unhealthy" || echo "unknown")
            if [ "$STATUS" = "healthy" ]; then
              echo "‚úÖ Container is healthy after $((i*5)) seconds"
              break
            elif [ "$STATUS" = "starting" ] || [ "$STATUS" = "unknown" ]; then
              echo "‚è≥ Container health: $STATUS (attempt $i/12)"
              sleep 5
            else
              echo "‚ùå Container unhealthy: $STATUS"
              docker logs luminakraft-launcher-api
              exit 1
            fi
          done
          
          # Final status
          docker-compose ps
          echo "Container logs:"
          docker logs luminakraft-launcher-api --tail 10
          
          # Clean up
          rm -f $HOME/luminakraft-api.tar.gz
          docker image prune -f
          
    - name: Verify deployment
      run: |
        echo "Testing external API endpoints..."
        sleep 5
        
        # Test health endpoint (may be blocked by Cloudflare externally, but that's OK)
        echo "Testing health endpoint (may be blocked by Cloudflare)..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://api.luminakraft.com/health || echo "000")
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Health check passed"
        elif [ "$HTTP_CODE" = "403" ]; then
          echo "‚ö†Ô∏è  Health endpoint blocked by Cloudflare (expected behavior)"
        else
          echo "‚ùå Health check failed with code: $HTTP_CODE"
        fi
        
        # Test authenticated endpoints with dummy token
        echo "Testing authenticated endpoints..."
        DUMMY_TOKEN=$(echo -n 'deployment_test_12345' | base64)
        
        INFO_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "x-lk-token: $DUMMY_TOKEN" https://api.luminakraft.com/v1/info)
        if [ "$INFO_CODE" = "200" ] || [ "$INFO_CODE" = "403" ]; then
          echo "‚úÖ Info endpoint responding (code: $INFO_CODE)"
        else
          echo "‚ùå Info endpoint failed with code: $INFO_CODE"
        fi
        
        CF_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "x-lk-token: $DUMMY_TOKEN" https://api.luminakraft.com/v1/curseforge/test)
        if [ "$CF_CODE" = "200" ] || [ "$CF_CODE" = "403" ]; then
          echo "‚úÖ CurseForge endpoint responding (code: $CF_CODE)"
        else
          echo "‚ùå CurseForge endpoint failed with code: $CF_CODE"
        fi 